/**********************************************************************
*   This function will iterate through the registered spell list,     *
*       check for spells with headers between min_caster_level and    *
*       51, and if any are found, create a new scroll copying its     *
*       spell ability header for the new scroll. It will append the   *
*       new scroll to ~scroll_list~                                   *
*                                                                     *
*   Prerequisites:                                                    *
*       - ~spell_list~ is populated.                                  *
*       - ~spell_min_caster_level~ is populated                       *
**********************************************************************/

//includes
INCLUDE ~./%MOD_FOLDER%/registration/fn-lookup_spell_resref.tph~
INCLUDE ~./%MOD_FOLDER%/registration/fn-lookup_spell_min_caster_level.tph~
INCLUDE ~./%MOD_FOLDER%/comp/leveled-scrolls/%bz_edition_code%/fn-read_spell_for_leveled_abilities.tph~
INCLUDE ~./%MOD_FOLDER%/comp/leveled-scrolls/%bz_edition_code%/fn-read_usability_flags_from_spell.tph~

DEFINE_ACTION_FUNCTION ~fn-create_leveled_scrolls~
BEGIN

    PRINT ~
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !   Iterating over `spell_list` to check for leveled effects   !
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ~

    ACTION_PHP_EACH ~spell_list~
        AS ~keys~ => ~value~
    BEGIN

        //identify RESREF
        LAUNCH_ACTION_FUNCTION ~fn-lookup_spell_resref~
            STR_VAR
                ~identifier~ = ~%keys_0%~
            RET
                spell = ~resref~
        END

        ACTION_IF
            FILE_EXISTS_IN_GAME ~%spell%.SPL~
        BEGIN

            //lookup the minimum caster level
            LAUNCH_ACTION_FUNCTION ~fn-lookup_spell_min_caster_level~
                STR_VAR
                    Tradition = ~%keys_1%~
                    Level = ~%keys_2%~
                RET
                    ~min_caster_level~ = ~minimum_caster_level~
            END

            //Open Spell
            COPY_EXISTING - ~%spell%.SPL~ ~./leveled/%spell%.SPL~

                //check for headers: { 1 > (any headers > min_level) < 51 }
                    //Function: return bool if there are any, array of headers like my copy shit from that one function for all contents
                LAUNCH_PATCH_FUNCTION ~fn-read_spell_for_leveled_abilities~
                    INT_VAR
                        minimum_caster_level = min_caster_level
                    RET
                        any_leveled_abilities = ~leveled_headers_found~
                    RET_ARRAY
                        leveled_abilities = ~headers~
                END

                // IFF found leveled abilities
                PATCH_IF (any_leveled_abilities = 1) THEN
                BEGIN
                    //read spell restrictions and calc its usability flags
                    LAUNCH_PATCH_FUNCTION ~fn-read_usability_flags_from_spell~
                        STR_VAR
                            ~spell~ = ~%spell%~
                        RET
                            ~spl_exclusion_flags~         = ~exclusion_flags~
                            ~spl_usability_mage~          = ~usability_mage~
                            ~spl_usability_bard~          = ~usability_bard~
                            ~spl_usability_ranger~        = ~usability_ranger~
                            ~spl_usability_paladin~       = ~usability_paladin~
                            ~spl_usability_cleric~        = ~usability_cleric~
                            ~spl_usability_druid~         = ~usability_druid~
                            ~spl_usability_shaman~        = ~usability_shaman~
                            ~spl_usability_good~          = ~usability_good~
                            ~spl_usability_neutral_trail~ = ~usability_neutral_trail~         // ...Neutral [Lawful/Chaotic]
                            ~spl_usability_evil~          = ~usability_evil~
                            ~spl_usability_lawful~        = ~usability_lawful~
                            ~spl_usability_neutral_lead~  = ~usability_neutral_lead~          // Neutral... [Evil/Good]
                            ~spl_usability_chaotic~       = ~usability_chaotic~
                    END

                END //check for `any_leveled_abilities` found

                //Once I have this data, I can exit the copy,
            BUT_ONLY_IF_IT_CHANGES


            ACTION_IF (any_leveled_abilities = 1) THEN
            BEGIN

                /* DEBUG */

                PRINT ~DEBUG: leveled_abilities: %spell%.SPL~
                ACTION_PHP_EACH ~leveled_abilities~
                    AS ~keys~ => ~value~
                BEGIN
                    //Debugging Statements
                    PRINT ~-leveled_abilities Record:
                        Ability Min. Level:     `%keys_0%`
                        ability_projectile:     `%keys_1%`
                        ability_range:          `%keys_2%`
                        ability_target:         `%keys_3%`
                        ability_target_count:   `%keys_4%`
                        transfer_effects_count: `%keys_5%`
                        transfer_effects:       `%keys_6%`
                        Value:                  `%value%`~
                END //loop for debug


                //IFF found leveled abilities
                    //loop through the returned array:
                        //Make an item with the new shit

            END //IF for further action


        END //if spell exists
        ELSE BEGIN
            WARN ~WARN: fn-create_leveled_scrolls: file %spell%.SPL` not found~
        END
    END //iterate through ~spell_list~
END //function
