/**********************************************************************
*   This function will iterate through the registered spell list,     *
*       check for spells with headers between min_caster_level and    *
*       51, and if any are found, create a new scroll copying its     *
*       spell ability header for the new scroll. It will append the   *
*       new scroll to ~scroll_list~                                   *
*                                                                     *
*   Prerequisites:                                                    *
*       - ~spell_list~ is populated.                                  *
*       - ~spell_min_caster_level~ is populated                       *
**********************************************************************/

//includes
INCLUDE ~./%MOD_FOLDER%/registration/fn-lookup_spell_resref.tph~
INCLUDE ~./%MOD_FOLDER%/registration/fn-lookup_spell_min_caster_level.tph~
INCLUDE ~./%MOD_FOLDER%/registration/fn-bz_calculate_scroll_cost.tph~
INCLUDE ~./%MOD_FOLDER%/registration/fn-bz_lookup_costs_scroll.tph~
INCLUDE ~./%MOD_FOLDER%/comp/leveled-scrolls/%bz_edition_code%/fn-read_spell_for_leveled_abilities.tph~
INCLUDE ~./%MOD_FOLDER%/comp/leveled-scrolls/%bz_edition_code%/fn-read_usability_flags_from_spell.tph~
INCLUDE ~./%MOD_FOLDER%/comp/shared/%bz_edition_code%/fn-bz_create_scroll_from_spell_header.tph~
INCLUDE ~./%MOD_FOLDER%/comp/shared/%bz_edition_code%/fn-bz_render_item_text.tph~
INCLUDE ~./%MOD_FOLDER%/comp/shared/%bz_edition_code%/fn-bz_get_mod_item_name_scroll.tph~
INCLUDE ~./%MOD_FOLDER%/comp/shared/%bz_edition_code%/%LANGUAGE%/fn-bz_inject_caster_level_into_name.tph~
INCLUDE ~./%MOD_FOLDER%/comp/shared/%bz_edition_code%/%LANGUAGE%/fn-bz_inject_caster_level_into_description.tph~

DEFINE_ACTION_FUNCTION ~fn-create_leveled_scrolls~
    RET_ARRAY
        ~scroll_list_data_export~
BEGIN

    PRINT ~
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !   Iterating over `spell_list` to check for leveled effects   !
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ~

    ACTION_PHP_EACH ~spell_list~
        AS ~keys~ => ~value~
    BEGIN

        //identify RESREF
        LAUNCH_ACTION_FUNCTION ~fn-lookup_spell_resref~
            STR_VAR
                ~identifier~ = ~%keys_0%~
            RET
                spell = ~resref~
        END

        ACTION_IF
            FILE_EXISTS_IN_GAME ~%spell%.SPL~
        BEGIN

            //lookup the minimum caster level
            LAUNCH_ACTION_FUNCTION ~fn-lookup_spell_min_caster_level~
                STR_VAR
                    Tradition = ~%keys_1%~
                    Level = ~%keys_2%~
                RET
                    ~min_caster_level~ = ~minimum_caster_level~
            END

            //Open Spell
            COPY_EXISTING - ~%spell%.SPL~ ~./leveled/%spell%.SPL~
                READ_SHORT (0x1C) ~spell_type~      //Innate/Wizard/Priest/etc.
                READ_LONG  (0x08) ~spell_name~
                READ_LONG  (0x50) ~spell_desc~

                //check for headers: { 1 > (any headers > min_level) < 51 }
                    //Function: return bool if there are any, array of headers like my copy shit from that one function for all contents
                LAUNCH_PATCH_FUNCTION ~fn-read_spell_for_leveled_abilities~
                    INT_VAR
                        minimum_caster_level = min_caster_level
                    RET
                        any_leveled_abilities = ~leveled_headers_found~
                    RET_ARRAY
                        leveled_abilities = ~headers~
                END

                // IFF found leveled abilities
                PATCH_IF (any_leveled_abilities = 1) THEN
                BEGIN
                    //read spell restrictions and calc its usability flags
                    LAUNCH_PATCH_FUNCTION ~fn-read_usability_flags_from_spell~
                        STR_VAR
                            ~spell~ = ~%spell%~
                        RET
                            ~spl_exclusion_flags~         = ~exclusion_flags~
                            ~spl_usability_mage~          = ~usability_mage~
                            ~spl_usability_bard~          = ~usability_bard~
                            ~spl_usability_ranger~        = ~usability_ranger~
                            ~spl_usability_paladin~       = ~usability_paladin~
                            ~spl_usability_cleric~        = ~usability_cleric~
                            ~spl_usability_druid~         = ~usability_druid~
                            ~spl_usability_shaman~        = ~usability_shaman~
                            ~spl_usability_good~          = ~usability_good~
                            ~spl_usability_neutral_trail~ = ~usability_neutral_trail~         // ...Neutral [Lawful/Chaotic]
                            ~spl_usability_evil~          = ~usability_evil~
                            ~spl_usability_lawful~        = ~usability_lawful~
                            ~spl_usability_neutral_lead~  = ~usability_neutral_lead~          // Neutral... [Evil/Good]
                            ~spl_usability_chaotic~       = ~usability_chaotic~
                    END

                END //check for `any_leveled_abilities` found

                //Once I have this data, I can exit the copy,
            BUT_ONLY_IF_IT_CHANGES


            ACTION_IF (any_leveled_abilities = 1) THEN
            BEGIN

                /* DEBUG */
                /*
                PRINT ~DEBUG: leveled_abilities: %spell%.SPL~
                ACTION_PHP_EACH ~leveled_abilities~
                    AS ~keys~ => ~value~
                BEGIN
                    //Debugging Statements
                    PRINT ~-leveled_abilities Record:
                        Ability Min. Level:     `%keys_0%`
                        ability_projectile:     `%keys_1%`
                        ability_range:          `%keys_2%`
                        ability_target:         `%keys_3%`
                        ability_target_count:   `%keys_4%`
                        transfer_effects_count: `%keys_5%`
                        transfer_effects:       `%keys_6%`
                        Value:                  `%value%`~
                END //loop for debug
                */


                // IFF found leveled abilities
                ACTION_IF (any_leveled_abilities = 1) THEN
                BEGIN
                    //prime the value
                    OUTER_TEXT_SPRINT ~bz_unleveled_scroll_bam_prefix~ ~~

                    //identify the BAM prefix
                    ACTION_PHP_EACH ~leveled_scroll_asset_prefixes~
                        AS ~prefix_keys~ => ~_v~
                    BEGIN
                        ACTION_IF (~%keys_0%~ STRING_EQUAL ~%prefix_keys_0%~) THEN
                        BEGIN
                            OUTER_TEXT_SPRINT ~bz_unleveled_scroll_bam_prefix~ ~%prefix_keys_1%~
                        END
                    END //iterate through ~leveled_scroll_asset_prefixes~
                    ACTION_IF (~%bz_unleveled_scroll_bam_prefix%~ STRING_EQUAL ~~) THEN BEGIN WARN ~WARN: leveled BAM group for %keys_0% not found~ END



                    //... then loop over `leveled_abilities` array
                    ACTION_PHP_EACH ~leveled_abilities~
                        AS ~abils~ => ~val~
                    BEGIN

                        //Get 0-padded caster level
                        ACTION_IF ((STRING_LENGTH ~%abils_0%~) = 0) THEN BEGIN OUTER_TEXT_SPRINT ~PaddedCasterLevel~ ~00~ END
                        ACTION_IF ((STRING_LENGTH ~%abils_0%~) = 1) THEN BEGIN OUTER_TEXT_SPRINT ~PaddedCasterLevel~ ~0%abils_0%~ END
                        ACTION_IF ((STRING_LENGTH ~%abils_0%~) > 1) THEN BEGIN OUTER_TEXT_SPRINT ~PaddedCasterLevel~ ~%abils_0%~ END



                        //Identify new scroll item resref
                        LAUNCH_ACTION_FUNCTION ~fn-bz_get_mod_item_name_scroll~
                            STR_VAR
                                ~Spell_ResRef~ = ~%spell%~
                                ~Level~ = ~%keys_2%~
                                ~Tradition~ = ~%keys_1%~    //Arcane/Divine (Priest)/Innate/Ranger/Class/Protection
                                ~Zero_Padded_Caster_Level~ = ~%PaddedCasterLevel%~
                            RET
                                scroll_itm = ~scroll_resref~
                        END //Identify new scroll item resref



                        //BEGIN: calculate the scroll cost
                        LAUNCH_ACTION_FUNCTION ~fn-bz_calculate_scroll_cost~
                            INT_VAR
                                ~CasterLevel~ = ~%abils_0%~
                                ~AdditionalCost~ = 0
                            STR_VAR
                                ~Level~ = ~%keys_2%~
                                ~Tradition~ = ~%keys_1%~
                            RET
                                ~scroll_cost~ = ~gold~
                        END //calculate the scroll cost


                        //Get the costs from the table
                        LAUNCH_ACTION_FUNCTION ~fn-bz_lookup_costs_scroll~
                            STR_VAR
                                ~Level~ = ~%keys_2%~
                                ~Tradition~ = ~%keys_1%~
                            RET
                                ~scroll_cost_failure~ = ~failure~
                        END


                        /*******************************************
                        *   BEGIN: Generate name and description   *
                        *******************************************/
                        LAUNCH_ACTION_FUNCTION ~fn-bz_render_item_text~
                            INT_VAR
                                caster_level = ~%abils_0%~
                                strref_name = spell_name
                                strref_desc = spell_desc
                            RET
                                ~scrl_name~ = ~identified_name~
                                ~scrl_desc~ = ~identified_description~
                        END //~fn-bz_render_item_text~

                        //append caster level to the name/description
                        LAUNCH_ACTION_FUNCTION ~fn-bz_inject_caster_level_into_name~
                            INT_VAR
                                caster_level = ~%abils_0%~
                            STR_VAR
                                name = ~%scrl_name%~
                            RET
                                scrl_name = name
                        END //~fn-bz_inject_caster_level_into_name~
                        LAUNCH_ACTION_FUNCTION ~fn-bz_inject_caster_level_into_description~
                            INT_VAR
                                caster_level = ~%abils_0%~
                            STR_VAR
                                desc = ~%scrl_desc%~
                            RET
                                scrl_desc = desc
                        END //~fn-bz_inject_caster_level_into_description~

                        OUTER_SET identified_name_STRREF = RESOLVE_STR_REF(~%scrl_name%~)
                        OUTER_SET identified_desc_STRREF = RESOLVE_STR_REF(~%scrl_desc%~)
                        /*****************************************
                        *   END: Generate name and description   *
                        *****************************************/


                        //learn spell?
                        OUTER_SET learn_spell = 0
                        ACTION_IF (spell_type = 1) THEN BEGIN OUTER_SET learn_spell = 1 END



                        /**********************
                        *   BEGIN: Copy BAM   *
                        **********************/
                        COPY
                            ~./%MOD_FOLDER%/comp/leveled-scrolls/%bz_edition_code%/BAM/en_us/number/%bz_unleveled_scroll_bam_prefix%-%PaddedCasterLevel%.BAM~
                            ~override/%scroll_itm%.BAM~
                        /********************
                        *   END: Copy BAM   *
                        ********************/


                        //Make an item with the new shit
                        LAUNCH_ACTION_FUNCTION ~fn-bz_create_scroll_from_spell_header~
                            INT_VAR
                                price = scroll_cost                                 //price of the scroll
                                lore = 0                                            //lore to identify the scroll
                                STRREF_identified_name = identified_name_STRREF     //STRREF for identified name
                                STRREF_identified_desc = identified_desc_STRREF     //STRREF for identified description
                                ability_projectile = ~%abils_1%~        //Which projectile the spell/scroll uses
                                ability_range = ~%abils_2%~             //range it can be thrown
                                ability_target_count = ~%abils_4%~      //targets affected
                                transfer_effects_count = ~%abils_5%~    //number of affects being added
                                target_type = ~%abils_3%~               //Type of target for ability
                                spell_type = spell_type                 //type of spell: Special (0); Wizard(1); Priest (2); Psionic (3); Innate(4); Bard Song(5)
                                learn_spell = learn_spell               //flag for if the spell can be learnt
                                usability_mage      = ~spl_usability_mage~
                                usability_bard      = ~spl_usability_bard~
                                usability_ranger    = ~spl_usability_ranger~
                                usability_paladin   = ~spl_usability_paladin~
                                usability_cleric    = ~spl_usability_cleric~
                                usability_druid     = ~spl_usability_druid~
                                usability_shaman    = ~spl_usability_shaman~
                                usability_good      = ~spl_usability_good~
                                usability_neutral_t = ~spl_usability_neutral_trail~        // ...Neutral [Lawful/Chaotic]
                                usability_evil      = ~spl_usability_evil~
                                usability_lawful    = ~spl_usability_lawful~
                                usability_neutral_l = ~spl_usability_neutral_lead~         /// Neutral... [Evil/Good]
                                usability_chaotic   = ~spl_usability_chaotic~
                            STR_VAR
                                spell = ~%spell%~                   //original spell RESREF tha was read from
                                item  = ~%scroll_itm%~              //item RESREF to write to
                                icon_inventory = ~%scroll_itm%~     //BAM RESREF to write for inventory
                                icon_description = ~CSCRL01~        //BAM RESREF to write for description
                                bin_effects_copied = ~%abils_6%~    //copied binary of effects read from spell
                        END //~fn-bz_create_scroll_from_spell_header~

                        //Finally, export am arrau emtry for scroll_list_data so that it can be crafted.
                        //  Note: this is inside a function, so adding to ~scroll_list_import~ would be lost
                        ACTION_DEFINE_ASSOCIATIVE_ARRAY ~scroll_list_data_export~
                        BEGIN
                            ~%keys_2%_%scrl_name%~,     //sorting key of level and spell name
                            ~%scroll_itm%~,             //scroll
                            ~%spell%~,                  //spell
                            ~%keys_1%~,                 //tradition
                            ~%keys_2%~,                 //spell level
                            ~%abils_0%~,                //caster level
                            ~%scroll_cost%~,            //cost of the scroll in the *.ITM file
                            ~0~,                        //any additional cost
                            ~100~,                      //time to scribe (in hours)
                            ~0~,                        //XP cost to scribe
                            ~%scroll_cost_failure%~,    //Chance of failure
                            ~%scrl_name%~               //scroll name for display
                                => ~%keys_2%_%scrl_name%~   //a rather arbitrary value to pick. could be name, scroll, etc.
                        END //export to ~scroll_list_data~

                    END //iterate over `leveled_abilities` array

                END //check for `any_leveled_abilities` found

            END //IF for further action

        //if spell exists
        END
        ELSE
        BEGIN
            WARN ~WARN: fn-create_leveled_scrolls: file %spell%.SPL` not found~
        END //spell DOESN't Exist

    END //iterate through ~spell_list~

END //function
