/***********************************************************************************************
*   Source: Based on `cd_items_casting_spells` provided by CamDawg
*   https://github.com/Gibberlings3/iwdfixpack/blob/master/iwdfixpack/lib/functions.tpa#L218
***********************************************************************************************/


DEFINE_ACTION_FUNCTION bz_copy_spell_header_to_scroll
    INT_VAR
        cast_at_level = 1       //caster level to search on; read headers looking a header with this cast at min level
        learn_spell   = "-1"    //flag for if the spell can be learnt
    STR_VAR
        spell = null            //spell RESREF to read from
        item  = null            //item RESREF to write to
    BEGIN

    ACTION_IF
        FILE_EXISTS_IN_GAME ~%spell%.SPL~ AND
        NOT FILE_EXISTS_IN_GAME ~%item%.ITM~
    BEGIN

    COPY_EXISTING ~%spell%.SPL~ ~override~
        READ_SHORT 0x68 abil_num
        READ_LONG  0x64 abil_off
        READ_LONG  0x6a fx_off
        PATCH_IF ((abil_num = 1) OR (cast_at_level = 1))
        BEGIN
            SET base_off = abil_off
        END
        ELSE BEGIN
            FOR (index = 1 ; index < abil_num ; ++index)    // skip first ability
            BEGIN
                READ_SHORT (abil_off + 0x10 + (index * 0x28)) min_lev
                PATCH_IF min_lev = cast_at_level BEGIN
                    SET base_off = (abil_off + 0x00 + (index * 0x28))
                    SET index = abil_num // kill loop
            END
            PATCH_IF min_lev < cast_at_level BEGIN
                SET base_off = (abil_off + 0x00 + ((index - 1) * 0x28))
                SET index = abil_num // kill loop
                END
            END
        END
        READ_ASCII (base_off + 0x04) icon
        READ_SHORT (base_off + 0x1e) transfer_fx_num
        READ_SHORT (base_off + 0x20) abil_fx_idx

        //NOTE: the two ability structures differ too much. Spell ability is smaller than item ability headers.
        //  Need to read each field then translate it over, methinks.
        READ_ASCII (base_off) entire_matching_ability (0x38)  //read the entire spell ability

        READ_ASCII (fx_off + (abil_fx_idx * 0x30)) transfer_effects (0x30 * transfer_fx_num)    // read all effects in a massive block
        BUT_ONLY

    //Calculate the number of abilities
    OUTER_SET ~new_ability_count~ = 1
    ACTION_IF ~learn_spell~ > 0 THEN BEGIN OUTER_SET ~new_ability_count~ = 2 END

    COPY_EXISTING ~./%MOD_FOLDER%/comp/missing-scrolls/ITM/blank_scroll.itm~ ~override/%item%.ITM~
        READ_SHORT 0x68 abil_num
        READ_LONG  0x64 abil_off
        READ_LONG  0x6a fx_off
        SET global_fx_idx_off = 0x6e
        SET global_fx_num_off = 0x70
        SET abil_fx_idx = 0x00

        INSERT_BYTES abil_off (0x38)                                        // make space for...
        WRITE_ASCII abil_off ~%entire_matching_ability%~                    // write the copied ability header

        SET abil_fx_num_off = (abil_off + 0x1E)                             //how many copied effects?
        WRITE_SHORT abil_fx_num_off (transfer_fx_num)                       // update number of effects in ability

        SET fx_off = (abil_off + 0x38)
        WRITE_LONG 0x6a (fx_off)                                            // update new effects offset

        //SET base_fx_add = (fx_off + 0x00 + (abil_fx_idx * 0x30))
        SET base_fx_add = fx_off
        INSERT_BYTES base_fx_add (0x30 * transfer_fx_num)                   // make space for...
        WRITE_ASCIIE base_fx_add ~%transfer_effects%~                       // transferred effects
        FOR (index2 = 0 ; index2 < transfer_fx_num ; ++index2) BEGIN        // loop through newly-inserted effects
            READ_ASCII (base_fx_add + 0x14 + (0x30 * index2)) resref
            PATCH_IF ("%resref%" STRING_COMPARE_CASE "%spell%" = 0) BEGIN   // if self-reference, update (i.e.: immune to re-casting spell?)
                WRITE_ASCIIE (base_fx_add + 0x14 + (0x30 * index2)) "%item%" #8
            END // end self-reference check
        END // end new fx loop
        WRITE_SHORT 0x68 (%new_ability_count%)                               //Now write the effects vals

        BUT_ONLY

    END
    ELSE BEGIN
        WARN ~cd_items_casting_spells: file(s) not found or invalid input~
    END

END
