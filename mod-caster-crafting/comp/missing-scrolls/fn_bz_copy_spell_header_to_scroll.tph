/***********************************************************************************************
*   Source: Based on `cd_items_casting_spells` provided by CamDawg
*   https://github.com/Gibberlings3/iwdfixpack/blob/master/iwdfixpack/lib/functions.tpa#L218
***********************************************************************************************/


DEFINE_ACTION_FUNCTION bz_copy_spell_header_to_scroll
    INT_VAR
        cast_at_level = 1               //caster level to search on; read headers looking a header with this cast at min level
        learn_spell   = "-1"            //flag for if the spell can be learnt
        usability_mage      = 0
        usability_bard      = 0
        usability_ranger    = 0
        usability_paladin   = 0
        usability_cleric    = 0
        usability_druid     = 0
        usability_shaman    = 0
        usability_good      = 1
        usability_neutral_t = 1         // ...Neutral [Lawful/Chaotic]
        usability_evil      = 1
        usability_lawful    = 1
        usability_neutral_l = 1         /// Neutral... [Evil/Good]
        usability_chaotic   = 1
        price = 0                       //price of the scroll
    STR_VAR
        spell = null                    //spell RESREF to read from
        item  = null                    //item RESREF to write to
        icon_inventory = null           //BAM RESREF to write for inventory
        icon_description = ~CSCRL01~    //BAM RESREF to write for description
    BEGIN

    ACTION_IF
        FILE_EXISTS_IN_GAME ~%spell%.SPL~ AND
        NOT FILE_EXISTS_IN_GAME ~%item%.ITM~
    BEGIN

        COPY_EXISTING ~%spell%.SPL~ ~override~
            READ_SHORT 0x68 abil_num
            READ_LONG  0x64 abil_off
            READ_LONG  0x6a fx_off
            PATCH_IF ((abil_num = 1) OR (cast_at_level = 1))
            BEGIN
                SET base_off = abil_off
            END
            ELSE BEGIN
                FOR (index = 1 ; index < abil_num ; ++index)    // skip first ability
                BEGIN
                    READ_SHORT (abil_off + 0x10 + (index * 0x28)) min_lev
                    PATCH_IF min_lev = cast_at_level BEGIN
                        SET base_off = (abil_off + 0x00 + (index * 0x28))
                        SET index = abil_num // kill loop
                END
                PATCH_IF min_lev < cast_at_level BEGIN
                    SET base_off = (abil_off + 0x00 + ((index - 1) * 0x28))
                    SET index = abil_num // kill loop
                    END
                END
            END

            //Exclusion flags
            READ_LONG (0x1E) ~exclusion_flags~

            //Read the spell header in fields to write to item
            // NOTE: the two ability structures differ too much. Spell ability is smaller than item ability headers.
            //      Need to read each field then translate it over, methinks.
            //READ_ASCII (base_off) entire_matching_ability (0x38)  //read the entire spell ability
            READ_BYTE  (base_off + 0x00) ~abil_type~
            READ_BYTE  (base_off + 0x01) ~abil_type_flags~
            READ_SHORT (base_off + 0x02) ~abil_location~
            READ_ASCII (base_off + 0x04) ~abil_icon~
            READ_BYTE  (base_off + 0x0C) ~abil_target~
            READ_BYTE  (base_off + 0x0D) ~abil_target_count~
            READ_SHORT (base_off + 0x0E) ~abil_range~
            READ_SHORT (base_off + 0x10) ~abil_caster_level~
            READ_SHORT (base_off + 0x12) ~abil_casting_speed~
            //unused 2 bytes
            READ_SHORT (base_off + 0x16) ~abil_dice_size~       //unused
            READ_SHORT (base_off + 0x18) ~abil_dice_count~      //unused
            READ_SHORT (base_off + 0x1A) ~abil_damage_bonus~    //unused
            READ_SHORT (base_off + 0x1C) ~abil_damage_type~     //unused
            READ_SHORT (base_off + 0x1E) transfer_fx_num
            READ_SHORT (base_off + 0x20) abil_fx_idx
            READ_SHORT (base_off + 0x22) ~abil_charge_count~    //unused
            READ_SHORT (base_off + 0x24) ~abil_when_drained~    //unused
            READ_SHORT (base_off + 0x26) ~abil_projectile~

            // read all effects in a massive block
            READ_ASCII (fx_off + (abil_fx_idx * 0x30)) transfer_effects (0x30 * transfer_fx_num)

            READ_LONG (0x08) ~spl_name~         //name
            READ_LONG (0x50) ~spl_description~  //description
            READ_SHORT (0x1C) ~spell_type~      //Innate/Wizard/Priest/etc.
            BUT_ONLY


        //Calculate usability flags
        OUTER_SET ~unusabilility_flags~ = 0b01100000011111111111111111111111    //all classes unusable
        ACTION_IF (%usability_mage%)
        THEN BEGIN
            OUTER_SET ~unusabilility_flags~ = %unusabilility_flags% BAND
                (BNOT (BIT8 BOR BIT13 BOR BIT15 BOR BIT16 BOR BIT18 BOR BIT19)) //Mage flags
        END
        ACTION_IF (%usability_bard%)
        THEN BEGIN
            OUTER_SET ~unusabilility_flags~ = %unusabilility_flags% BAND (BNOT (BIT6)) //Bard
        END
        ACTION_IF (%usability_ranger%)
        THEN BEGIN
            OUTER_SET ~unusabilility_flags~ = %unusabilility_flags% BAND (BNOT (BIT21 BOR BIT10)) //Ranger
        END
        ACTION_IF (%usability_paladin%)
        THEN BEGIN
            OUTER_SET ~unusabilility_flags~ = %unusabilility_flags% BAND (BNOT (BIT20)) //Paladin
        END
        ACTION_IF (%usability_druid%)
        THEN BEGIN
            OUTER_SET ~unusabilility_flags~ = %unusabilility_flags% BAND (BNOT (BIT12 BOR BIT30)) //Druid
        END
        ACTION_IF (%usability_cleric%)
        THEN BEGIN
            OUTER_SET ~unusabilility_flags~ = %unusabilility_flags% BAND
                (BNOT (BIT7 BOR BIT8 BOR BIT9 BOR BIT10 BOR BIT14 BOR BIT15)) //Cleric
        END
        ACTION_IF (%usability_good%)
        THEN BEGIN
            OUTER_SET ~unusabilility_flags~ = %unusabilility_flags% BAND (BNOT (BIT2)) //Good
        END
        ACTION_IF (%usability_neutral_t%)
        THEN BEGIN
            OUTER_SET ~unusabilility_flags~ = %unusabilility_flags% BAND (BNOT (BIT3)) // ... Neutral [Lawful/Chaotic]
        END
        ACTION_IF (%usability_evil%)
        THEN BEGIN
            OUTER_SET ~unusabilility_flags~ = %unusabilility_flags% BAND (BNOT (BIT1)) //Evil
        END
        ACTION_IF (%usability_lawful%)
        THEN BEGIN
            OUTER_SET ~unusabilility_flags~ = %unusabilility_flags% BAND (BNOT (BIT4)) //Lawful
        END
        ACTION_IF (%usability_neutral_l%)
        THEN BEGIN
            OUTER_SET ~unusabilility_flags~ = %unusabilility_flags% BAND (BNOT (BIT5)) // Neutral... [Good/Evil]
        END
        ACTION_IF (%usability_chaotic%)
        THEN BEGIN
            OUTER_SET ~unusabilility_flags~ = %unusabilility_flags% BAND (BNOT (BIT0)) //Chaotic
        END

        //kit exclusion flags work differently for priest spells. Since we already know the exclusion, and handle it elsewhere FOR ITEMS, erase them
        ACTION_IF (%spell_type% = 2) THEN BEGIN OUTER_SET ~exclusion_flags~ = 0 END


        COPY_EXISTING ~./%MOD_FOLDER%/comp/missing-scrolls/ITM/blank_scroll.itm~ ~override/%item%.ITM~
            READ_SHORT 0x68 abil_num
            READ_LONG  0x64 abil_off
            READ_LONG  0x6a fx_off
            SET global_fx_idx_off = 0x6e
            SET global_fx_num_off = 0x70
            SET abil_fx_idx = 0x00

            //write the exclusion flags
            WRITE_BYTE (0x29) ((%exclusion_flags% BAND 0xFF000000) >> 24)   //cleric byte
            WRITE_BYTE (0x2B) ((%exclusion_flags% BAND 0x00FF0000) >> 16)   //thief byte
            WRITE_BYTE (0x2D) ((%exclusion_flags% BAND 0x0000FF00) >> 8)    //mage byte
            WRITE_BYTE (0x2F) ((%exclusion_flags% BAND 0x000000FF))         //warrior byte

            WRITE_LONG (0x1E) (%unusabilility_flags%)           //unusability flags

            WRITE_LONG (0x0C) (%spl_name%)                      //identified name
            WRITE_LONG (0x54) (%spl_description%)               //identified description
            WRITE_ASCII_TERMINATE (0x3A) ~%icon_inventory%~     //update the item inventory icon
            WRITE_ASCII_TERMINATE (0x58) ~%icon_description%~   //update the item description icon
            WRITE_LONG (0x34) (%price%)                         //set the price

            // write the copied ability header
            LPF ~ADD_ITEM_HEADER~           // Add item header
                INT_VAR
                    type = 3                // Scrolls use `Magic`
                    required_id = 0         // Require ID to use?
                    location = 3            // Item/equipment
                    alt_dicesize = 0
                    target = %abil_target%  // target?
                    target_count = %abil_target_count%
                    range = %abil_range%    // range
                    projectile_type = 0     // No launcher
                    alt_dicenumber = 0
                    speed = 0
                    alt_damage = 0
                    thaco = 0
                    dicesize = 0
                    school = 0              // not used?
                    dicenumber = 0
                    sectype = 0             // not used?
                    damage = 0
                    damage_type = 1         // Piercing damage
                    charges = 1
                    depletion = 1           // vanishes
                    flags = 0               // no flags set
                    projectile = %abil_projectile%
                    //Animation %s
                    overhand = 34
                    backhand = 33
                    thrust = 33
                    is_bow = 0
                    is_xbow = 0
                    is_sling = 0
                    copy_header = 0
                    insert_point = ~-1~
                STR_VAR
                    icon = ~%icon_inventory%~
            END

            SET abil_fx_num_off = (abil_off + 0x1E)                             //how many copied effects?
            WRITE_SHORT abil_fx_num_off (transfer_fx_num)                       // update number of effects in ability

            SET fx_off = (abil_off + 0x38)
            WRITE_LONG 0x6a (fx_off)                                            // update new effects offset

            //SET base_fx_add = (fx_off + 0x00 + (abil_fx_idx * 0x30))
            SET base_fx_add = fx_off
            INSERT_BYTES base_fx_add (0x30 * transfer_fx_num)                   // make space for...
            WRITE_ASCIIE base_fx_add ~%transfer_effects%~                       // transferred effects
            FOR (index2 = 0 ; index2 < transfer_fx_num ; ++index2) BEGIN        // loop through newly-inserted effects
                READ_ASCII (base_fx_add + 0x14 + (0x30 * index2)) resref
                PATCH_IF ("%resref%" STRING_COMPARE_CASE "%spell%" = 0) BEGIN   // if self-reference, update (i.e.: immune to re-casting spell?)
                    WRITE_ASCIIE (base_fx_add + 0x14 + (0x30 * index2)) "%item%" #8
                END // end self-reference check
            END // end new fx loop
            WRITE_SHORT 0x68 (0x01)             //Now write the effects vals

            //TODO: Exception for Shaman usability because of weirdness
            //  There's probably only one of these that I _need_ to have multiples on, which was the Cleric/Shaman spell: Contagious Fear (Cleric/Shaman, HLA)
            PATCH_IF (%usability_shaman% AND NOT %usability_druid%) THEN
            BEGIN
                LPF ~ADD_ITEM_EFFECT~
                    INT_VAR
                        opcode = 319            // Usability overrides
                        target = 1              // Self
                        timing = 1              // Instant/Permanent until death
                        parameter1 = 21         // Shaman
                        parameter2 = 5          // CLASS.IDS
                        power = 1               // Allow
                        resist_dispel = 2       // Not dispel / bypass resistance
                        duration = 0
                        probability1 = 100
                        probability2 = 0
                        dicenumber = 0
                        dicesize = 0
                        savingthrow = 0
                        savebonus = 0
                        special = "-1"          //strref for unusability flag?
                        header = 2              // 1-indexed header number
                        type = 3
                        insert_point = ~-1~     // last effect to insert
                    STR_VAR
                        resource = ~~
                END
            END


            //write additional header for learning spell
            PATCH_IF (%learn_spell%) THEN
            BEGIN
                LPF ~ADD_ITEM_HEADER~           // Add item header
                    INT_VAR
                        type = 3                // Scrolls use `Magic`
                        required_id = 0         // Require ID to use?
                        location = 3            // Item/equpiment
                        alt_dicesize = 0
                        target = 5              // Caster
                        target_count = 0
                        range = 1               // range 1 ft.
                        projectile_type = 0     // No launcher
                        alt_dicenumber = 0
                        speed = 0
                        alt_damage = 0
                        thaco = 0
                        dicesize = 0
                        school = 0              // not used?
                        dicenumber = 0
                        sectype = 0             // not used?
                        damage = 0
                        damage_type = 1         // Piercing damage
                        charges = 1
                        depletion = 1           // vanishes
                        flags = 0               // no flags set
                        projectile = %abil_projectile%
                        //Animation %s
                        overhand = 34
                        backhand = 33
                        thrust = 33
                        is_bow = 0
                        is_xbow = 0
                        is_sling = 0
                        copy_header = 0
                        insert_point = ~-1~
                    STR_VAR
                        icon = ~%icon_inventory%~
                END

                LPF ~ADD_ITEM_EFFECT~
                    INT_VAR
                        opcode = 147            // Learn spell
                        target = 1              // Self
                        timing = 1              // Instant/Permanent until death
                        parameter1 = 1
                        parameter2 = 0
                        power = 0
                        resist_dispel = 2       // Not dispel / bypass resistance
                        duration = 0
                        probability1 = 100
                        probability2 = 0
                        dicenumber = 0
                        dicesize = 0
                        savingthrow = 0
                        savebonus = 0
                        special = 0
                        header = 2              // 1-indexed header number
                        type = 3
                        insert_point = ~-1~     // last effect to insert
                    STR_VAR
                        resource = ~%spell%~    // spell to learn
                END
            END

            BUT_ONLY

    END
    ELSE BEGIN
        WARN ~bz_copy_spell_header_to_scroll: file(s) not found or invalid input
            Spell:  %spell%.SPL
            Item:   %item%.ITM~
    END

END
