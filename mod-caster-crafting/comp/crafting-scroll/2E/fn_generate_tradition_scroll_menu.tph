DEFINE_ACTION_FUNCTION ~bz_generate_tradition_scroll_menu~
    INT_VAR
        ~LevelMax~ = 10 //maximum number of spell circles
    STR_VAR
        ~LevelMaxChar~ = ~~ //A for 10-th level or Q for quest-level
        ~CircleTradition~ = ~~
        ~BufferName~ = ~~   //name of file to append to
        ~StateTraditionName~ = ~~   //lower case name of tradition to use in state transitions and such
        ~ScrollAnalysisPrompt~ = ~~ //unique string that is used for analyzing a specific spell (differs between divine and arcane)
    BEGIN

        /********************************************
        *   Generate the transitions dynamicially   *
        ********************************************/

        OUTER_FOR (i = 1; i < (%LevelMax% + 1); ++i)
        BEGIN
            //Get the appropriate spell circle variable set up
            OUTER_SPRINT ~spell_circle~ ~0~
            ACTION_IF (i = %LevelMax%) THEN BEGIN OUTER_SPRINT ~spell_circle~ ~%LevelMaxChar%~ END
            ELSE BEGIN OUTER_SPRINT ~spell_circle~ ~%i%~ END

            //Append to the buffer for each circle
            APPEND_OUTER -
                ~%BufferName%~
                ~~~~~

EXTEND_TOP ~BZMSCST~
    bz_caster_craft_scribe_scroll_%StateTraditionName%_circle_%spell_circle% //state number(s)
                ~~~~~

            LAUNCH_ACTION_FUNCTION ~bz_lookup_costs_scroll~
                STR_VAR
                    ~Level~ = ~%spell_circle%~
                    ~Tradition~ = ~Divine~
                RET
                    ~bz_scroll_time~ = ~time~
                    ~bz_scroll_failure~ = ~failure~
                    ~scribe_time_engine~ = ~time_engine~
                    ~readable_time~ = ~time_readable~
            END

            //Generate the transitions and name the states for individual divine scrolls
            ACTION_PHP_EACH ~scroll_list_data~
                AS ~keys~ => ~value~
                BEGIN
                    ACTION_IF ((~%keys_4%~ STRING_EQUAL ~%spell_circle%~) AND (~%keys_3%~ STRING_EQUAL ~%CircleTradition%~))  //Spell circle matches
                        THEN BEGIN
                            //Get the cost in gold for the scroll
                            COPY_EXISTING - ~%keys_2%.SPL~ ~override~
                                //Patches
                                READ_LONG (0x0C) ~bz_spell_name_STRREF~
                            BUT_ONLY_IF_IT_CHANGES

                            ACTION_GET_STRREF (%bz_spell_name_STRREF%) ~spell_name~

                            OUTER_SPRINT ~scroll_transition_response~ ~%spell_name%~

                            //Give the scroll a dialog option
                            APPEND_OUTER -
                                ~%BufferName%~
                                ~~~~~
        IF ~HaveKnownSpellRES("%keys_2%")~
        THEN
            REPLY ~%scroll_transition_response%~
            GOTO bz_caster_craft_scribe_scroll_%StateTraditionName%_circle_%spell_circle%_%keys_2%
                                ~~~~~
                        END //circle match
                END //for each

            //End the .D top-level command, `EXTEND_TOP`
            APPEND_OUTER -
                ~%BufferName%~
                ~~~~~

END
                ~~~~~

        END //OUTER_FOR

        /************************************************
        *  END: Generate the transitions dynamicially   *
        ************************************************/




        /******************************************************
        *   Generate scroll states and transitions to craft   *
        ******************************************************/
        APPEND_OUTER -
            ~%BufferName%~
            ~~~~~

APPEND ~BZMSCST~
            ~~~~~


        OUTER_FOR (i = 1; i < (%LevelMax% + 1); ++i)
        BEGIN
            //Get the appropriate spell circle variable set up
            OUTER_SPRINT ~spell_circle~ ~0~
            ACTION_IF (i = %LevelMax%) THEN BEGIN OUTER_SPRINT ~spell_circle~ ~%LevelMaxChar%~ END
            ELSE BEGIN OUTER_SPRINT ~spell_circle~ ~%i%~ END

            LAUNCH_ACTION_FUNCTION ~bz_lookup_costs_scroll~
                STR_VAR
                    ~Level~ = ~%spell_circle%~
                    ~Tradition~ = ~CircleTradition~
                RET
                    ~bz_scroll_time~ = ~time~
                    ~bz_scroll_failure~ = ~failure~
                    ~scribe_time_engine~ = ~time_engine~
                    ~readable_time~ = ~time_readable~
            END

            //Calculate the bounds for failure
            OUTER_SET ~bz_scroll_failure_bounds_cursed~ = (99 - %bz_scroll_failure%)     //use this for GT(X)
            OUTER_SET ~bz_scroll_failure_bounds_success~ = (100 - %bz_scroll_failure%)   //use this for LT(X)

            //Generate the transitions and name the states for individual scrolls
            ACTION_PHP_EACH ~scroll_list_data~
                AS ~keys~ => ~value~
                BEGIN
                    ACTION_IF ((~%keys_4%~ STRING_EQUAL ~%spell_circle%~) AND (~%keys_3%~ STRING_EQUAL ~%CircleTradition%~))  //Spell circle matches
                        THEN BEGIN
                            //Get the cost in gold for the scroll
                            COPY_EXISTING - ~%keys_1%.ITM~ ~override~
                                //Patches
                                READ_LONG (0x34) ~scroll_gold_cost~
                                READ_LONG NAME2 ~bz_scroll_name_STRREF~
                            BUT_ONLY_IF_IT_CHANGES

                            ACTION_GET_STRREF (%bz_scroll_name_STRREF%) ~scroll_name~
                            OUTER_SPRINT ~spell_name~ ~%keys_11%~

                            OUTER_SPRINT ~scroll_prompt~ @15090 // ~You meditate over the spell %spell_name% and prepare its power.~
                            OUTER_SPRINT ~scroll_response~ (AT ~ScrollAnalysisPrompt~) // e.g.: ~\[%scroll_gold_cost% gold; %readable_time%\] Scribe a scroll of %scroll_name%.~

                            //Give the type of scroll as a dialog option
                            APPEND_OUTER -
                                ~%BufferName%~
                                ~~~~~
    IF ~~
    THEN BEGIN bz_caster_craft_scribe_scroll_%StateTraditionName%_circle_%spell_circle%_%keys_2%
        SAY ~%scroll_prompt%~
            IF ~HaveKnownSpellRES("%keys_2%")
RandomNumLT(100, %bz_scroll_failure_bounds_success%)~   //created successfully
            THEN
                REPLY ~%scroll_response%~
                DO ~
TakePartyGold(%scroll_gold_cost%)
DestroyGold(%scroll_gold_cost%)
AdvanceTime(%scribe_time_engine%)
GiveItemCreate("%value%", Myself, 1, 0, 0)
CreateVisualEffectObject("BZSCRIBE", Myself)
ClearAllActions()
StartCutSceneMode()
StartCutScene("BZCTWRIT")~
                EXIT
            IF ~HaveKnownSpellRES("%keys_2%")
RandomNumGT(100, %bz_scroll_failure_bounds_cursed%)~    //failure, create cursed scroll
            THEN
                REPLY ~%scroll_response%~
                DO ~
TakePartyGold(%scroll_gold_cost%)
DestroyGold(%scroll_gold_cost%)
AdvanceTime(%scribe_time_engine%)
CreateCreature("BZCSCRL", [-1.-1], S)
CreateVisualEffectObject("BZSCRIBE", Myself)
ActionOverride("BZ_CursedScrollGiver", GivePartyAllEquipment())
ActionOverride("BZ_CursedScrollGiver", DestroySelf())
ClearAllActions()
StartCutSceneMode()
StartCutScene("BZCTWRIT")~
                EXIT
            IF ~~
            THEN REPLY @15033 // ~Pick another spell~
                GOTO bz_caster_craft_scribe_scroll_%StateTraditionName%_circle_%spell_circle%
            IF ~~
            THEN REPLY @15032 // ~Pick another spell circle~
                GOTO bz_caster_craft_scribe_scroll_menu
            IF ~~
            THEN REPLY @15031 // ~Go back to your scribe tools.~
                GOTO bz_caster_craft_scribe_main_menu
            IF ~~
            THEN REPLY @15030 // ~Pack up your scribe tools.~
                EXIT
    END
                                ~~~~~
                        END //if circlers match
                END //for each spell_list_data
        END //spell level loop


        APPEND_OUTER -
            ~%BufferName%~
            ~~~~~

END
            ~~~~~
        /***********************************************************
        *   END: Generate scroll states and transitions to craft   *
        ***********************************************************/

END
