/****************************************************************
*   This file will handle the creation of *.ITM resources       *
*       for the new potions I want to create. It will be        *
*       driven off of my registry metadata, with exception      *
*       cases created more explicitly.                          *
*                                                               *
*   Precondition:                                               *
*       - Associative array ~new_potions_spells_items~ exists   *
*       and is populated                                        *
****************************************************************/

//function defs
INCLUDE ~./%MOD_FOLDER%/comp/missing-potions/%bz_edition_code%/fn_bz_read_spell_header_for_potion.tph~
INCLUDE ~./%MOD_FOLDER%/comp/missing-potions/%bz_edition_code%/fn_bz_create_potion_from_spell_header.tph~
INCLUDE ~./%MOD_FOLDER%/registration/fn_bz_lookup_costs_potion.tph~
INCLUDE ~./%MOD_FOLDER%/registration/tables/%bz_edition_code%/costs-potion.tph~
INCLUDE ~./%MOD_FOLDER%/lib/macros.tph~


PRINT ~
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Iterating through registry of spells that can be made into potions...   !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~

//loop through all of the new potions from spells metadata
ACTION_PHP_EACH ~new_potions_spells_items~
    AS ~keys~ => ~value~
    BEGIN
        PRINT ~DEBUG: Spell-Potion Entry:
            Value:              `%value%`
            SRC BAM:            `%keys_10%`
            Dest BAM:           `%keys_11%`
            DESC BAM:           `%keys_12%`
            Caster Level:       `%keys_8%`
            Duration_Opcode:    `%keys_14%`
            Duration_Offset:    `%keys_15%`
            Magnitude_Opcode:   `%keys_16%`
            Magnitude_Offset:   `%keys_17%`
            Magnitude2_Opcode:  `%keys_18%`
            Magnitude2_Offset:  `%keys_19%`
        ~

        /****************
        *   Copy BAMs   *
        ****************/
        //copy inventory BAM
        COPY
            ~./%MOD_FOLDER%/comp/missing-potions/BAM/inv/%keys_10%~
            ~override/%keys_11%.BAM~

        //copy description BAM
        ACTION_IF NOT FILE_EXISTS ~./override/%keys_12%.BAM~
        THEN BEGIN
            COPY
                ~./%MOD_FOLDER%/comp/missing-potions/BAM/desc/%keys_12%.BAM~
                ~override/%keys_12%.BAM~
        END
        /*********************
        *   END: Copy BAMs   *
        *********************/



        /********************************
        *    BEGIN: Read Source Spell   *
        ********************************/
        LAUNCH_ACTION_FUNCTION ~fn_bz_read_spell_header_for_potion~
            INT_VAR
                cast_at_level       = ~%keys_8%~    //caster level to search on; read headers looking a header with this cast at min level
            STR_VAR
                spell               = ~%keys_7%~    //spell RESREF to read from
                duration_opcode     = ~%keys_14%~   //opcode of the effect blocks to search to get the duration from
                duration_offset     = ~%keys_15%~   //offset within the header's effect matching opcode to read from
                magnitude_opcode    = ~%keys_16%~   //opcode of the effect blocks to search to get the magnitude from
                magnitude_offset    = ~%keys_17%~   //offset within the header's effect matching opcode to read from
                magnitude2_opcode   = ~%keys_18%~   //opcode of the effect blocks to search to get the magnitude2 from
                magnitude2_offset   = ~%keys_19%~   //offset within the header's effect matching opcode to read from
            RET
                spl_duration = ~duration~
                spl_magnitude = ~magnitude~
                spl_magnitude2 = ~magnitude2~
                spl_ability_projectile = ~ability_projectile~
                spl_abil_range = ~ability_range~
                spl_abil_target_count = ~ability_target_count~
                spl_transfer_effects_count = ~transfer_effects_count~
                spl_transfer_effects = ~transfer_effects~
        END

        PRINT ~DEBUG: Read values:
            DURATION:               %spl_duration%
            MAGNITUDE:              %spl_magnitude%
            MAGNITUDE2:             %spl_magnitude2%
            PROJECTILE:             %spl_ability_projectile%
            RANGE:                  %spl_ability_range%
            TARGET COUNT:           %spl_ability_target_count%
            COPIED EFFECT COUNT:    %spl_transfer_effects_count%
            COPIED EFFECT BIN:      %spl_transfer_effects%
        ~
        /******************************
        *    END: Read Source Spell   *
        ******************************/



        /***********************************************
        *   BEGIN: Calculate strings for description   *
        ***********************************************/

        //After reading duration, emit a value that does days; hours; turns (rounds);rounds; seconds; instant
        ACTION_IF (spl_duration = 0) THEN BEGIN OUTER_SPRINT duration @49910 END

        ELSE BEGIN  //days
            ACTION_IF ((spl_duration MODULO 7200) = 0) THEN
            BEGIN
                OUTER_SET duration_days = (spl_duration / 7200)
                ACTION_IF (duration_days > 1) THEN BEGIN OUTER_SPRINT duration @49901 END
                ELSE BEGIN OUTER_SPRINT duration @49900 END
            END
            ELSE BEGIN  //hours
                ACTION_IF ((spl_duration MODULO 300) = 0) THEN
                BEGIN
                    OUTER_SET duration_hours = (spl_duration / 300)
                    ACTION_IF (duration_hours > 1) THEN BEGIN OUTER_SPRINT duration @49903 END
                    ELSE BEGIN OUTER_SPRINT duration @49902 END
                END
                ELSE BEGIN  //turns
                    ACTION_IF ((spl_duration MODULO 60) = 0) THEN
                    BEGIN
                        OUTER_SET duration_turns = (spl_duration / 60)
                        OUTER_SET duration_rounds = (duration_turns / 10)
                        ACTION_IF (duration_turns > 1) THEN BEGIN OUTER_SPRINT duration @49905 END
                        ELSE BEGIN OUTER_SPRINT duration @49904 END
                    END
                    ELSE BEGIN  //rounds
                        ACTION_IF ((spl_duration MODULO 6) = 0) THEN
                        BEGIN
                            OUTER_SET duration_rounds = (duration_turns / 6)
                            ACTION_IF (duration_rounds > 1) THEN BEGIN OUTER_SPRINT duration @49907 END
                            ELSE BEGIN OUTER_SPRINT duration @49906 END
                        END
                        ELSE BEGIN  //seconds
                            OUTER_SET duration_seconds = spl_duration
                            ACTION_IF (duration_seconds > 1) THEN BEGIN OUTER_SPRINT duration @49909 END
                            ELSE BEGIN OUTER_SPRINT duration @49908 END
                        END //seconds
                    END //rounds
                END //turns
            END //hours
        END //days

        OUTER_SET magnitude = ~%spl_magnitude%~
        OUTER_SET magnitude2 = ~%spl_magnitude2%~


        /*
            Expect these values variables:
                %duration%;
                    [X] very common
                %magnitude%
                    [X] Fly
                    [X] Snilloc's
                    [X] Armor of Faith
                    [X] Barkskin
                    [X] Draw Upon Holy Might
                    [X] Mirror Image
                    [X] Fireball
                    [X] Holy Power
                    [X] Spirit Fire
                    [X] Stoneskin
                    [X] Champion's Strength
                    [X] Righteous Magic
                    [X] Tenser's Transformation
                    [X] Chain Lightning
                %magnitude2%
                    [X] Holy Power
                    [X] Righteous Magic
        */

        OUTER_SPRINT identified_name (AT "keys_5")
        OUTER_SPRINT identified_description (AT "keys_6")

        OUTER_SET identified_name_STRREF = RESOLVE_STR_REF(~%identified_name%~)
        OUTER_SET identified_description_STRREF = RESOLVE_STR_REF(~%identified_description%~)

        PRINT ~DEBUG: Result descriptions:
            identified_name_STRREF:         `%identified_name_STRREF%`
            identified_description_STRREF:  `%identified_description_STRREF%`
            identified_name:                `%identified_name%`
            identified_description:         `%identified_description%`
        ~
        /*********************************************
        *   END: Calculate strings for description   *
        *********************************************/



        /******************************
        *    BEGIN: Create ITM file   *
        ******************************/
        ACTION_IF (keys_1) THEN //If generate automatically/using generic code
        BEGIN
            LAUNCH_ACTION_FUNCTION fn_bz_lookup_costs_potion
                INT_VAR
                    tier = ~%keys_9%~
                RET
                    potion_cost = cost
            END

            LAUNCH_ACTION_FUNCTION ~fn_bz_create_potion_from_spell_header~
                INT_VAR
                    price = potion_cost                                     //price of the potion
                    STRREF_identified_name = identified_name_STRREF         //STRREF for identified name
                    STRREF_identified_desc = identified_description_STRREF  //STRREF for identified description
                    ability_projectile = spl_ability_projectile             //Which projectile the spell/potion uses
                    ability_range = spl_abil_range                          //range it can be thrown
                    ability_target_count = spl_abil_target_count            //targets affected
                    transfer_effects_count = spl_transfer_effects_count     //number of affects being added
                STR_VAR
                    spell = ~%keys_7%~                              //original spell RESREF tha was read from
                    item  = ~%keys_0%~                              //item RESREF to write to
                    icon_inventory = ~%keys_11%~                    //BAM RESREF to write for inventory
                    icon_description = ~%keys_12%~                  //BAM RESREF to write for description
                    bin_effects_copied = ~%spl_transfer_effects%~   //copied binary of effects read from spell
                    target_type = ~%keys_4%~                        //Type of target for ability
                    usability_override = ~%keys_13%~                //for some weird "cannot be used by lawful" spells
            END
        END
        /****************************
        *    END: Create ITM file   *
        ****************************/



        /******************************
        *    BEGIN: Hard-coded ITMs   *
        ******************************/
        //TODO: ITMs that automation won't work for:
        /*
            Find Traps
            Fly
            Snilloc's Snowball
            Tenser's Transformation

            sphere-of-protection-from-acid
            sphere-of-protection-from-cold
            sphere-of-protection-from-electricity
            sphere-of-protection-from-fire
            sphere-of-protection-from-petrification
            sphere-of-protection-from-poison
        */
        /****************************
        *    END: Hard-coded ITMs   *
        ****************************/
    END
